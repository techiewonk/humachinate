name: Publish Python üêç distributions üì¶ to PyPI and TestPyPI

permissions:
  contents: write # Explicitly grant write permission to GitHub Actions bot

on:
  push:
    branches:
      - main # This triggers the workflow on pushes to the main branch
      - release # Trigger the workflow on pushes to the release branch
    tags:
      - "v*" # Also triggers on tag pushes with version-like tags

jobs:
  build-and-publish:
    name: Build and publish Python üêç distributions üì¶ to PyPI and TestPyPI
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history to allow version bumping based on tags

      # Setup Python 3.11 (explicit version)
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      # Install pipenv globally
      - name: Install pipenv globally
        run: |
          python -m pip install --upgrade pipenv wheel build commitizen

      - id: cache-pipenv
        uses: actions/cache@v4
        with:
          path: ~/.local/share/virtualenvs
          key: ${{ runner.os }}-pipenv-${{ hashFiles('**/Pipfile.lock') }}

      # Install dependencies and build module within pipenv
      - name: Install dependencies and build module within pipenv
        run: |
          pipenv install --python 3.11 --dev
          pipenv install wheel
          pipenv install commitizen
          pipenv install build  # Ensure 'build' is installed within pipenv

      # Configure Git user identity before commitizen
      - name: Configure Git user
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      # Use commitizen to bump the version and create a new release tag
      - name: Bump version and create tag with commitizen
        run: |
          cz bump --yes  # This will bump the version and create a new tag

      # Push the bumped version and the new tag back to Git
      - name: Push changes to Git
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # GitHub token to push changes
        run: |
          git push --follow-tags  # Pushes both commits and new tag to GitHub

      # Build a binary wheel and a source tarball using the build tool
      - name: Build a binary wheel and a source tarball
        run: |
          pipenv run python -m build

      # Store the distribution packages as an artifact
      - name: Store the distribution packages
        uses: actions/upload-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

  publish-to-pypi:
    name: Publish Python üêç distribution üì¶ to PyPI
    if: github.ref == 'refs/heads/release' # Only publish to PyPI on pushes to the release branch
    needs:
      - build-and-publish
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/humachinate
    permissions:
      id-token: write # Required for trusted publishing

    steps:
      - name: Download the distribution packages
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

      - name: Publish distribution üì¶ to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}

  publish-to-testpypi:
    name: Publish Python üêç distribution üì¶ to TestPyPI
    needs:
      - build-and-publish
    runs-on: ubuntu-latest

    steps:
      - name: Download the distribution packages
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

      - name: Publish distribution üì¶ to TestPyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          password: ${{ secrets.TEST_PYPI_TOKEN }}

  github-release:
    name: Sign and upload to GitHub Release
    needs:
      - publish-to-pypi
    runs-on: ubuntu-latest

    permissions:
      contents: write # Required for making GitHub Releases
      id-token: write # Required for Sigstore signing

    steps:
      - name: Download the distribution packages
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

      - name: Sign the dists with Sigstore
        uses: sigstore/gh-action-sigstore-python@v2.1.1
        with:
          inputs: |
            ./dist/*.tar.gz
            ./dist/*.whl

      - name: Create GitHub Release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Set GH_TOKEN environment variable
        run: |
          tag_name=${{ github.ref }}
          tag_name=${tag_name#refs/tags/}  # Extract tag name from refs/tags/v1.0.1
          gh release create \
            "$tag_name" \
            --repo '${{ github.repository }}' \
            --notes ""

      - name: Upload artifact signatures to GitHub Release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Set GH_TOKEN environment variable
        run: |
          tag_name=${{ github.ref }}
          tag_name=${tag_name#refs/tags/}  # Extract tag name from refs/tags/v1.0.1
          gh release upload \
            "$tag_name" dist/** \
            --repo '${{ github.repository }}'
